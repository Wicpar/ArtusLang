/*
 * Copyright 2017 - present Frederic Artus Nieto
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass="com.artuslang.lang.parser.ArtusParser"
  parserUtilClass="com.artuslang.lang.parser.ArtusParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  parserImports = "static org.intellij.grammar.parser.GeneratedParserUtilBase.*;"

  psiClassPrefix="Artus"
  psiImplClassSuffix="Impl"
  psiPackage="com.artuslang.lang.psi"
  psiImplPackage="com.artuslang.lang.psi.impl"

  tokens=[
    EOL='regexp:\R'
    WHITE_SPACE='regexp:\s+'

//    ESC = "regexp:(\\(['\"`\\?abtnvfre] | {UNICODE} | {HEXADECIMAL} | {ESCOCT}))"
//    UNICODE = "regexp:(u[0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F])"
//    BUNICODE = "regexp:U[0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]"
//    ESCOCT = "regexp:([0-7] [0-7] [0-7])"

    DECIMAL = "regexp:[0-9]+"
//    SDECIMAL = "regexp:-{DECIMAL}"
    OCTAL = "regexp:0o[0-7]+"
    HEXADECIMAL = "regexp:0x[0-9a-fA-F]+"
    BINARY = "regexp:0b[0-1]+"
    FLOAT = "regexp:-?([1-9][0-9]* | '0')(\.[0-9]*)?(('e' | 'E')(-|\+)?[1-9][0-9]*)?"

//    CHAR = "regexp:'([^'\\]|{ESC})'"
    CHAR = "regexp:'([^'\\]|(\\(['\"`\\?abtnvfre] | (u[0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]) | 0x[0-9a-fA-F][0-9a-fA-F] | ([0-7] [0-7] [0-7]))))'"
//
//    STRING="regexp:(\"([^\"\\]|{ESC})*\")"
//    EXPR = "regexp:(\`([^\"\\]|{ESC})*\`)"
    STRING="regexp:(\"([^\"\\]|(\\(['\"`\\?abtnvfre] | (u[0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]) | 0x[0-9a-fA-F][0-9a-fA-F] | ([0-7] [0-7] [0-7]))))*\")"
    EXPR = "regexp:(\`([^\"\\]|(\\(['\"`\\?abtnvfre] | (u[0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]) | 0x[0-9a-fA-F][0-9a-fA-F] | ([0-7] [0-7] [0-7]))))*\`)"

    NAME_ = "regexp:[a-zA-Z_][0-9a-zA-Z_]*"

    OP = "regexp:(([;\[\](){}.,])|([&#|\^@%!:?/*$ยง+=<>\-][.,&#|\^@%!:?/*$ยง+=<>\-]*))"

  ]
}

grammar ::= (identifier | operator)*


identifier ::= stringIdentifier | operatorIdentifier | nameIdentifier | floatIdentifier | integerIdentifier


nameIdentifier ::=  NAME_

floatIdentifier ::= FLOAT

integerIdentifier ::= DECIMAL | SDECIMAL | OCTAL | HEXADECIMAL | CHAR | BINARY

stringIdentifier ::= STRING

operatorIdentifier ::= EXPR

operator ::= OP