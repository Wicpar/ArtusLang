"""
lexer.includeFromPath("..\artus_repository\artus_lang\base.artus");
lexer.includeFromPath("..\artus_repository\artus_lang\artus_module_util.artus");

var literalMatcher = repo.getUtil("literalMatcher");
var endScript = repo.getUtil("endScript");

var ctx = repo.getContextType("artus.recoverable.spaceable.commentable") ?: log('severe', 'artus.recoverable.spaceable.commentable not found');

var name = repo.registerMatcher("name", "[\p{Pc}\p{L}\p{M}\p{No}][\p{Pc}\p{L}\p{M}\p{N}]*");
var dot = literalMatcher(".");
var namespace = repo.registerMatcher("namespace", "namespace");
var bo = literalMatcher("{");
var bc = literalMatcher("}");

var mainCtx = repo.extendContextType("main", ctx, [namespace], {
    namespace.type:  function () {
        lexer.pushContext(repo.getContextType(ctx, 'namespaceName'));
    }
});
var namespaceNameCtx = repo.extendContextType("namespaceName", ctx, [name], {
    name.type: function () {
        lexer.changeContext(repo.getContextType(ctx, 'namespaceNext'), scope.getOrDefault(token.text));
    }
});
var namespaceNextCtx = repo.extendContextType("namespaceNext", ctx, [bo, dot], {
    dot.type: function () {
        lexer.changeContext(namespaceNameCtx);
    },
    bo.type: function () {
        lexer.changeContext(repo.getContextType(mainCtx, 'block'));
    }
});
var blockCtx = repo.extendContextType("block", mainCtx, [bc], {
    bc.type: "lexer.popContext()"
});
endScript(mainCtx);
"""

namespace aa.bb.cc.dd {
    namespace ee {
        namespace kk {
            namespace gg {
                namespace hh {
                    namespace ii {
                        //this is a comment {{{{{{ and brackets that shouldn't be taken in account
                        /*
                            a block comment
                        */
                    }
                    /*
                        and verify if lazy
                    */
                }
                namespace jj {}
            }
            namespace ff {}
        }
        namespace ff {}
    }
    namespace ff {}
}