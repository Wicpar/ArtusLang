###
/*
    use with context.properties["artus.path.alias"][aliasKey]
    returns list of ids to replace the aliasKey (allows for renaming) (the list of ids ends with the key if not renamed)
*/
    lang:import("../utils/typesUtil.artus");
    lang:import("../utils/literalMatcher.artus");
    lang:import("../utils/contextUtil.artus");
    lang:import("fragments/nameSuite.artus");
    lang:import("fragments/ignore.artus");
    lang:import("fragments/fileBody.artus");
    lang:import("matchers/name.artus");

    var delimiterType = tokenType("delimiter");
    var keywordType = tokenType("keyword");
    var notype = tokenType("");

    var com = literalMatcher(",", delimiterType);
    var sem = literalMatcher(";", delimiterType);
    var as = literalMatcher("as", delimiterType);

    var endl = lang:tokenMatcher(notype, "\\n|\\z");

    var using = literalMatcher("using", keywordType);


    var endfn = function(token, ctx) {
        var names = ctx.properties["artus.suite.ids"];
        var map = lang:hashMapOf();
        map.putAll(ctx.parent.properties["artus.path.alias"] ?: lang:hashMapOf());
        map.put(names.get(names.size() - 1), names);
        ctx.parent.properties["artus.path.alias"] = map;
        //debug output
        if (this:get("debug") == true) {
            log:println("artus.alias: " + map);
        }
    }

    var ignore = contexts:get("artus.ignore");
    var nameMatcher = matchers:get("artus.name");

    var endCtx = lang:contextType("artus.using.end", lang:arrayListOf(
        lang:contextMatcherPop(sem),
        lang:contextMatcherPop(endl)
    ), lang:arrayListOf(ignore))

    var asCtx = lang:contextType("artus.using.as", lang:arrayListOf(
        lang:contextMatcherSwitchWith(nameMatcher, endCtx, function(token, ctx) {
            var names = ctx.properties["artus.suite.ids"];
            var map = lang:getOrPut(ctx.parent.properties, "artus.path.alias", lang:hashMapOf());
            map.put(token.text, names);
            //debug output
            if (this:get("debug") == true) {
                log:println("artus.alias: " + map);
            }
        }, false)
    ), lang:arrayListOf(ignore))

    var nameSuiteBuilder = builders:get("artus.suite.name");
    var usingCtx = nameSuiteBuilder("artus.using",
        lang:arrayListOf(
            lang:contextMatcherPopWith(sem, endfn),
            lang:contextMatcherPopWith(endl, endfn),
            lang:contextMatcherSwitch(as, asCtx),
            function(ctx, swicthCtx) {
                return lang:contextMatcherSwitchWith(com, ctx, endfn, false);
            }
        )
    );

    endCtx.addMatcher(lang:contextMatcherSwitch(com, usingCtx, false));

    var fileBodyCtx = contexts:get("artus.file.body");
    fileBodyCtx.addMatcher(lang:contextMatcherPush(using, usingCtx));

###