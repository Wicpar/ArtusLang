###
    lang:import("../utils/typesUtil.artus");
    lang:import("../utils/literalMatcher.artus");
    lang:import("../utils/contextUtil.artus");
    lang:import("fragments/ignore.artus");
    lang:import("fragments/fileBody.artus");
    lang:import("matchers/name.artus");
    lang:import("fragments/typeTree.artus");

    var delimiterType = tokenType("delimiter");
    var keywordType = tokenType("keyword");

    var bo = literalMatcher("\{", delimiterType);
    var bc = literalMatcher("\}", delimiterType);

    var type = literalMatcher("type", keywordType);

    var ignore = contexts:get("artus.ignore");


    var typeBodyCtx = lang:contextType("artus.type", lang:arrayListOf(
        lang:contextMatcherPop(bc)
    ), lang:arrayListOf(ignore));

    this:put("artus_type_builders", lang:arrayListOf(function(map) {
        map.put("properties", lang:heritableMapOf());
    }));

    var typemap = lang:hashMapOf();
    this:put("getType", function(key, features, filters) {
        var map = typemap.get(key);
        if (map == null) {
            map = lang:hashMapOf();
            for (builder: artus_type_builders) {
                builder(map);
            }
            map.put("name", key);

            var node = typeTree.findNodeOrBuild(lang:pathOf(key, features, filters), {"".class: lang:nodeBuilder(function(val, features, filters) {
                return lang:node(features, filters);
            })});
            node.properties.put("type", map);
            map.put("node", node);

            typemap.put(key, map);
            //debug output
            if (this:get("debug") == true) {
                log:println("artus.type: " + key);
            }
        }
    });

    var typeSwitchCtx = lang:contextType("artus.type.switch", lang:arrayListOf(
        lang:contextMatcherSwitchWith(bo, typeBodyCtx, function(token, tokenCtx, newCtx) {
            var name = tokenCtx.properties["artus.type.name"];
            var ids = newCtx.properties["artus.path.ids"] ?: lang:arrayListOf();
            var features = newCtx.properties["artus.path.features"] ?: lang:arrayListOf();
            var filters = newCtx.properties["artus.path.filters"] ?: lang:arrayListOf();
            ids.add(name);
            newCtx.properties["artus.type.object"] = getType(ids, features, filters);
            newCtx.properties["artus.path.ids"] = ids;
        })
    ), lang:arrayListOf(ignore));

    var nameMatcher = matchers:get("artus.name");

    var typePathCtx = lang:contextType("artus.type.path", lang:arrayListOf(
        lang:contextMatcherSwitchWith(nameMatcher, typeSwitchCtx, function(token, tokenCtx, newCtx) {
            newCtx.properties["artus.type.name"] = token.text;
        })
    ), lang:arrayListOf(ignore));

    var fileBodyCtx = contexts:get("artus.file.body");
    fileBodyCtx.addMatcher(lang:contextMatcherPush(type, typePathCtx));
    contexts:put("artus.type", typeBodyCtx);
###