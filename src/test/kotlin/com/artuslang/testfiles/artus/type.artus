###
    lang:import("../utils/typesUtil.artus");
    lang:import("../utils/literalMatcher.artus");
    lang:import("../utils/contextUtil.artus");
    lang:import("fragments/ignore.artus");
    lang:import("fragments/fileBody.artus");
    lang:import("matchers/name.artus");
    lang:import("fragments/typeTree.artus");

    var delimiterType = tokenType("delimiter");
    var keywordType = tokenType("keyword");

    var bo = literalMatcher("\{", delimiterType);
    var bc = literalMatcher("\}", delimiterType);

    var type = literalMatcher("type", keywordType);

    var ignore = contexts:get("artus.ignore");


    var typeBodyCtx = lang:contextType("artus.type", lang:arrayListOf(
        lang:contextMatcherPop(bc)
    ), lang:arrayListOf(ignore));

    var utils = lang:hashMapOf();
    this:registerNamespace("artus_type", utils);
    utils.put("builders", lang:arrayListOf(function(map) {
        map["properties"] = lang:heritableMapOf();
    }));

    var getType = function(key, features, filters) {

        var node = typeTree.findNodeOrBuild(lang:pathOf(key, features, filters), {"".class: lang:nodeBuilder(function(val, features, filters) {
            return lang:node(features, filters);
        })});

        var map = node.properties.get(type);
        if (map == null) {
            map = lang:hashMapOf();
            map.put("name", key);
            map.put("node", node);
            for (builder: utils.get("builders")) {
                builder(map);
            }
            node.properties.put("type", map);
            //debug output
            if (this:get("debug") == true) {
                log:println("artus.type: " + key);
            }
        } else {
            log:throw("type: " + key + "already defined");
        }
        return map;
    };
    utils.put("typeGetter", getType);

    var typeBuilder = function(token, tokenCtx, newCtx) {
        var name = tokenCtx.properties["artus.type.name"];
        var ids = lang:arrayListOf();
        ids.addAll(newCtx.properties["artus.path.ids"] ?: lang:listOf());
        var features = newCtx.properties["artus.path.features"] ?: lang:arrayListOf();
        var filters = newCtx.properties["artus.path.filters"] ?: lang:arrayListOf();
        ids.add(name);
        newCtx.properties["artus.type.object"] = getType(ids, features, filters);
        newCtx.properties["artus.path.ids"] = ids;
    }
    utils.put("typeBuilder", typeBuilder);

    var typeSwitchCtx = lang:contextType("artus.type.switch", lang:arrayListOf(
        lang:contextMatcherSwitchWith(bo, typeBodyCtx, typeBuilder)
    ), lang:arrayListOf(ignore));

    var nameMatcher = matchers:get("artus.name");

    var typePathCtx = lang:contextType("artus.type.path", lang:arrayListOf(
        lang:contextMatcherSwitchWith(nameMatcher, typeSwitchCtx, function(token, tokenCtx, newCtx) {
            newCtx.properties["artus.type.name"] = token.text;
        })
    ), lang:arrayListOf(ignore));

    var fileBodyCtx = contexts:get("artus.file.body");
    fileBodyCtx.addMatcher(lang:contextMatcherPush(type, typePathCtx));
    contexts:put("artus.type", typeBodyCtx);
    contexts:put("artus.type.switch", typeSwitchCtx);
    contexts:put("artus.type.path", typePathCtx);
###