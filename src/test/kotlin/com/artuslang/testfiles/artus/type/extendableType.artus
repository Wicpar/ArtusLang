###
    lang:import("../type.artus");
    lang:import("../fragments/nameSuite.artus");

    var delimiterType = tokenType("delimiter");

    var col = literalMatcher(":", delimiterType);
    var com = literalMatcher(",", delimiterType);
    var bo = literalMatcher("\{", delimiterType);
    var dot = literalMatcher("\.", delimiterType);

    var ignore = contexts:get("artus.ignore");
    var nameSuiteBuilder = builders:get("artus.suite.name");

    artus_type:get("builders").add(function(map) {
        map["parents"] = lang:arrayListOf();
    });
    var typeBuilder = artus_type:get("typeBuilder");
    var typeBodyCtx = contexts:get("artus.type");

    var typeExtCtx = nameSuiteBuilder("artus.type.extends", lang:arrayListOf(
        lang:contextMatcherSwitchWith(bo, typeBodyCtx, function(token, tokenCtx, newCtx) {
            typeBuilder(token, tokenCtx, newCtx);
            var type = newCtx.properties["artus.type.object"];

            var parents = tokenCtx.properties["artus.type.parents"] ?: lang:arrayListOf();
            parents.add(tokenCtx.properties["artus.suite.ids"]);
            tokenCtx.properties["artus.suite.ids"] = null;
            type["parents"].addAll(parents);
        }, false),
        function(context, ignores) {
            return lang:contextMatcherSwitchWith(com, context, function(token, tokenCtx, newCtx) {
                var parents = tokenCtx.properties["artus.type.parents"] ?: lang:arrayListOf();
                parents.add(tokenCtx.properties["artus.suite.ids"]);
                tokenCtx.properties["artus.suite.ids"] = null;
                newCtx.properties["artus.type.parents"] = parents;
            });
        }
    ));

    var typeSwitchCtx = contexts:get("artus.type.switch");
    typeSwitchCtx.addMatcher(lang:contextMatcherSwitch(col, typeExtCtx));
###