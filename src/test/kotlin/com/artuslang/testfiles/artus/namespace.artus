###
    lang:import("../utils/typesUtil.artus");
    lang:import("../utils/literalMatcher.artus");
    lang:import("../utils/contextUtil.artus");
    lang:import("fragments/ignore.artus");
    lang:import("fragments/fileBody.artus");
    lang:import("fragments/nameSuite.artus");
    lang:import("matchers/name.artus");

    var delimiterType = tokenType("delimiter");
    var keywordType = tokenType("keyword");

    var bo = literalMatcher("\{", delimiterType);
    var bc = literalMatcher("\}", delimiterType);
    var dot = literalMatcher("\.", delimiterType);
    var namespace = literalMatcher("namespace", keywordType);

    var ignore = contexts:get("artus.ignore");

    var namespaceBodyCtx = lang:contextType("artus.namespace", lang:arrayListOf(
        lang:contextMatcherPop(bc)
    ));

    var nameSuiteBuilder = builders:get("artus.suite.name");

    var namespaceSwitchCtx = nameSuiteBuilder("artus.namespace.suite",
        lang:arrayListOf(
            lang:contextMatcherSwitchWith(bo, namespaceBodyCtx, function(token, tokenCtx, newCtx) {
                var names = tokenCtx.properties["artus.suite.ids"];
                var ids = lang:arrayListOf();
                ids.addAll(newCtx.properties["artus.path.ids"] ?: lang:listOf());
                ids.addAll(names);
                newCtx.properties["artus.path.ids"] = ids;
                //debug output
                if (this:get("debug") == true) {
                    log:println("artus.namespace: " + ids);
                }
            }, false)
        )
    );


    var nameMatcher = matchers:get("artus.name");
    var fileBodyCtx = contexts:get("artus.file.body");

    fileBodyCtx.addMatcher(lang:contextMatcherPush(namespace, namespaceSwitchCtx));

    namespaceBodyCtx.addParent(fileBodyCtx);
    
    contexts:put("artus.namespace", namespaceBodyCtx);
###